{
    "exercises": [
        {
            "name": "Basics",
            "path": "exercises/basics",
            "hasTests": false,
            "compilationHint": "Fix simple parentheses errors."
        },
        {
            "name": "Types: Primitives",
            "path": "exercises/types/primitives",
            "hasTests": false,
            "compilationHint": "Fix any kind of type mixing or wrongly used type errors."
        },
        {
            "name": "Types: Sequences",
            "path": "exercises/types/sequences",
            "hasTests": false,
            "compilationHint": "Fix any kind of type mixing or wrongly used type errors."
        },
        {
            "name": "Types: Composites",
            "path": "exercises/types/composites",
            "hasTests": false,
            "compilationHint": "Fix any kind of type mixing or wrongly used type errors."
        },
        {
            "name": "Keywords",
            "path": "exercises/keywords",
            "hasTests": true,
            "compilationHint": "Fix any kind of type mixing or wrongly used type errors.",
            "tests": [
                {
                    "name": "Test for performing addition on block-height",
                    "hint": "Fix the get-block-height function to get (block height + \"64\")."
                }
            ]
        },
        {
            "name": "Storing Data: Constants",
            "path": "exercises/storing-data/constants",
            "hasTests": true,
            "compilationHint": "Fix any kind of type mixing or wrongly used type errors.",
            "tests": [
                {
                    "name": "Test for verifying the deployer wallet address",
                    "hint": "Fix the contract-owner constant to be the contract deployer's principal."
                }
            ]
        },
        {
            "name": "Storing Data: Variables",
            "path": "exercises/storing-data/variables",
            "hasTests": true,
            "compilationHint": "Fix any kind of type mixing or wrongly used type errors.",
            "tests": [
                {
                    "name": "Test for verifying the sender wallet address",
                    "hint": "Fix the \"who\" key to return the sender address."
                },
                {
                    "name": "Test for performing set & get on variable: high-score",
                    "hint": "Fix the \"score\" key to return the argument sent to the set function."
                }
            ]
        },
        {
            "name": "Storing Data: Maps",
            "path": "exercises/storing-data/maps",
            "hasTests": true,
            "compilationHint": "Fix any kind of type mixing or wrongly used type errors.",
            "tests": [
                {
                    "name": "Test for performing set & get on map: orders",
                    "hint": "Fix the set-order-one function to set amount the argument value against key \"1\"."
                },
                {
                    "name": "Test for performing set & get on map: highest-bids",
                    "hint": "Fix the set-highest-bids function to set the asset principal to SP3KANBW2C4E5BRPWNTWZCCDGF2F87CW9D9KV0FFK."
                }
            ]
        },
        {
            "name": "Functions: Public",
            "path": "exercises/functions/public",
            "hasTests": true,
            "compilationHint": "Fix syntax errors in the clarity code.",
            "tests": [
                {
                    "name": "Test for performing sum of three numbers",
                    "hint": "Finish the public function \"sum-three\" to take in 3 unsigned integers and return an \"ok\" response with their sum."
                }
            ]
        },
        {
            "name": "Functions: Private",
            "path": "exercises/functions/private",
            "hasTests": true,
            "compilationHint": "Fix syntax errors in the clarity code.",
            "tests": [
                {
                    "name": "Test for validating if public function caller is the deployer",
                    "hint": "Finish the private function \"is-valid-caller\" to return a boolean whether the caller is the deployer of the contract."
                }
            ]
        },
        {
            "name": "Functions: Read Only",
            "path": "exercises/functions/read-only",
            "hasTests": true,
            "compilationHint": "Fix syntax errors in the clarity code.",
            "tests": [
                {
                    "name": "Test for fetching the deployer's counter value",
                    "hint": "Finish the read-only function \"get-my-counter\" to return an optional with the deployer's counter value."
                }
            ]
        }
    ]
}
